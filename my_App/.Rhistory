-2 %*% r$vectors[,1] == A %*% r$vectors[,1]
A
A %*% r$vectors[,1]
-2 %*% r$vectors[,1]
A %*% r$vectors[,2]
r$vectors
r$vectors[,1] * r$vectors[,2]
r$vectors[,1] %*% r$vectors[,2]
matrix(c(1,-3), nrow=2)
matrix(c(1,-3), nrow=2) %*% matrix(c(3,1), nrow=2)
matrix(c(1,-3), nrow=2) %*% matrix(c(3,1))
matrix(c(1,-3)) %*% matrix(c(3,1))
matrix(c(1,-3), nrow=2, ncol=1) %*% matrix(c(3,1), nrow=2, ncol=1)
c(1,-3) * c(3,1)
c(1,-3) * c(1,3)
c(1,-3) * c(3,1)
M <- matrix(c(3,0,1,-4,1,2,-6,0,-2),)
M <- matrix(c(3,0,1,-4,1,2,-6,0,-2),nrow=3,ncol=3)
M
?eigen
eigen(M)
eigen(M, only.values=T)
M
eigen(M, EISPACK=F)
eigen(M, EISPACK=T)
eigen(M)
M*1
x <- c(2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1)
y <- c(2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9)
x - mean(x)
x_adjusted <- x-mean(x)
y_adjusted <- y-mean(y)
plot(x_adjusted, y_adjusted)
plot(x_adjusted, y_adjusted, pch=2)
plot(x_adjusted, y_adjusted, pch=3)
cov(x_adjusted, y_adjusted)
cov(x_adjusted, x_adjusted)
cov(x_adjusted, x_adjusted)/sd(x_adjusted)*sd(x_adjusted)
cov(x, x)/sd(x)*sd(x)
cov(x, x)/sd(x)
x_adj <- x-mean(x)
y_adj <- y-mean(y)
plot(x_adj, y_adj, pch=3)
cov(x_adj, y_adj)
M <- matrix(c(a,b,c,d), nrow=2, ncol=2)
a <- cov(x_adj, x_adj)
b <- cov(x_adj, y_adj)
c <- cov(x_adj, y_adj)
d <- cov(y_adj, y_adj)
M <- matrix(c(a,b,c,d), nrow=2, ncol=2)
e <- eigen(M)
e
M$vectors
e$vectors[,1]
e$vectors[,1]*x_adj
length(x_adj)
e$vectors[1,1]*x_adj
e$vectors[2,1]*x_adj
x_eig <- e$vectors[1,1]*x_adj
x_eig <- e$vectors[1,1]*x_adj
y_eig <- e$vectors[2,1]*x_adj
line(x_eig, y_eig)
line(x_eig, y_eig)
plot(x_eig, y_eig)
data(iris)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
data(iris); library(ggplot2); library(caret)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testin)
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
install.packages('rattle')
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=testing)
modPre <- predict(modFit, newdata=testing)
summary(modPre)
library(AppliedPredictiveModeling)
library(caret)
data("segmentationOriginal")
names(segmentationOriginal)
table(segmentationOriginal$Case)
library(AppliedPredictiveModeling)
library(caret)
data("segmentationOriginal")
table(segmentationOriginal$Case)
head(segmentationOriginal$Case)
head(segmentationOriginal$Class)
?subset
subset(segmentationOriginal, case=="Train")
subset(segmentationOriginal, Case=="Train")
training <- subset(segmentationOriginal, Case=="Train")
training$Class
training$Case
testing <- subset(segmentationOriginal, Case=="Test")
seed(125)
set.seed(125)
fitMod <- train(Class ~ ., method="rpart", data=segmentationOriginal)
predict(fitMod, newdata=(TotalIntench2=23000, FiberWidthCh1=10, PerimStatusCh1=2))
predict(fitMod, newdata=as.data.frame(TotalIntench2=23000, FiberWidthCh1=10, PerimStatusCh1=2))
predict(fitMod, newdata=as.data.frame(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=2))
fancyRpartPlot(fitMod$finalModel)
training$TotalIntenCh2
predict(fitMod, newdata=c(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=2))
?predict
predict(fitMod, c(TotalIntenCh2=23000, FiberWidthCh1=10, PerimStatusCh1=2))
library(ElemStatLearn); data(ozone, package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
ozone
head(ozone)
ll <- matrix(NA, nrow=10, ncol=155)
dim(ozone)
sample(1:dim(ozone)[1], replace=T)
sample(1:10, replace=T)
?loess
plot(ozone$ozone, ozone$temperature, pch=19, cex=0.5)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
#Local Polynomial Regression Fitting - 'smooth' curve
#'span': degree of smoothing
loess0 <- loess(temperature ~ ozone, data=ozone0, span=0.2)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
}
ll
ll[1,]
dim(ozone)
data.frame(ozone=1:155)
dim(ozone)
names(ozone)
names(ozone)
dd <- sample(1:dim(ozone)[1], replace=T)
dd
ozone5 <- ozone[dd,]
ozone5 <- ozone5[order(ozone5$ozone),]
loess1 <- loess(temperture ~ ozone, data=ozone5, span=0.2)
loess1 <- loess(temperature ~ ozone, data=ozone5, span=0.2)
summary(loess1)
summary(ozone$ozone)
dim(ll)
ll[1:10]
ll[1]
ll[1,]
lines(1:155, ll[1,], col="grey", lwd=2)
for(i in 1:10){
lines(1:155, ll[i,], col="grey", lwd=2)
}
lines(1:155, apply(ll,2,mean), col="red", lwd=2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
?bag
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(x=predictors,
y=temperature,
B=10,
bagControl=bagControl(
fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate
))
plot(ozone$ozone, temperature, col="lightgrey", pch=19)
treebag$fits
length(treebag$fits)
treebag$fits[1]
treebag$fits[[1]]
treebag$fits
points(ozone$ozone, predict(treebag$fits[[1]]$fit, predictors), pch=19, col="red")
points(ozone$ozone, predict(treebag, predictors), pch=19, col="blue")
library(pgmm)
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
dim(olive)
names(olive)
modFit <- train(Area ~ ., method="rpart", data=olive)
preMod <- predict(modFit, newdata=as.data.frame(t(colMeans(olive))))
colMeans(olive)
t(colMeans(olive))
preMod
summary(preMod)
table(olive$Area)
summary(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
dim(SAheart)
train
tt = sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=F)
tt
trainSA = SAheart[train,]
trainSA = SAheart[tt,]
testSA = SAheart[-tt]
set.seed(13234)
names(SAheart)
?train
mf <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial")
mf <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
summary(trainSA$chd)
table(trainSA$chd)
class(trainSA$chd)
mf <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
mp <- predict(mf, testSA)
names(testSA)
names(trainSA)
tt = sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=F)
trainSA = SAheart[tt,]
testSA = SAheart[-tt,]
set.seed(13234)
mf <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
mp <- predict(mf, testSA)
mp
(prediction > 0.5)
(mp > 0.5) * 1
names(SAheart)
mf>0.5
mf
mp
mp>0.5
as.numeric(mp) > 0.5
as.numeric(mp)
mp
as.integer(mp)
as.integer(mp)-1
(as.integer(mp)-1) > 0.5
((as.integer(mp)-1) > 0.5) * 1
testSA$chd
missClass = function(values, prediction){
sum( ((as.integer(mp)-1) > 0.5) * 1 != values) / length(values)
}
missClass(testSA$chd, mf)
mt <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
mp <- predict(mt, testSA)
missClass1 = function(values, prediction){
sum( ((prediction > 0.5) * 1 != values) / length(values)
}
missClass1 = function(values, prediction){
sum(((prediction > 0.5) * 1) != values) / length(values)
}
missClass1(testSA$chd, mp)
missClass(testSA$chd, mp)
mf <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
mp <- predict(mt, testSA)
missClass(testSA$chd, mp)
mt <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
mp <- predict(mf, testSA)
missClass(testSA$chd, mp)
##Q4
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
tt = sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=F)
trainSA = SAheart[tt,]
testSA = SAheart[-tt,]
set.seed(13234)
mt <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
mp <- predict(mt, testSA)
missClass1(testSA$chd, mp)
missClass1(trainSA$chd, mp)
missClass1(testSA$chd, mp)
missClass1(trainSA$chd, mp)
mt1 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=testSA)
mp1 <- predict(mt1, trainSA)
missClass(trainSA$chd, mp1)
data(iris)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
modFit <- train(Species ~ ., data=training, method="rf", prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
names(training)[3]
names(training)[4]
irisP <- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
rownames(irisP)
irisP$Species <- rownames(irisP)
names(irisP)
irisP$Species
irisP$setosa
irisP$Petal.Length
p <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p + geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species),
size=5, shape=4, data=irisP)
p + geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species),
size=5, shape=4, data=irisP)
irisP
pred <- predict(modFit, testing)
testing$predRight <- pred==testing$Species
testing$predRight
table(pred, testing$predRight)
table(pred, testing$Species)
qplot(Petal.Width, Petal.Length, colour=predRight, data=testing, main="newdata Predictions")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
table(vowel.train$y)
set.seeds(33833)
set.seed(33833)
modFit <- train(y ~ ., method="rpart", data=vowel.train)
?varImp
varImp(modFit)
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train)
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., method="rf", data=vowel.train)
varImp(modFit)
modFit <- train(y ~ ., method="rf", data=vowel.train, importance = TRUE)
varImp(modFit)
varImp(modFit$finalModel)
modFit
?randomForest
modFit <- train(y ~ ., method="rf", data=vowel.train, trControl = trainControl(method='oob'),
prox=True)
modFit <- train(y ~ ., method="rf", data=vowel.train, trControl = trainControl(method='oob'),
prox=True)
names(vowel.test)
rf <- randomForest(vowel.train[,-1], vowel.train$y)
varImp(modFit)
varImp(rf)
set.seed(33833)
rf <- randomForest(vowel.train[,-1], vowel.train$y)
varImp(rf)
rf <- randomForest(vowel.train[,-1], vowel.train$y, importance=TRUE)
varImp(rf)
rf <- randomForest(vowel.train[,-1], vowel.train$y, importance=TRUE)
varImp(rf)
modFit <- train(y ~ ., method="rf", data=vowel.train, trControl = trainControl(method='oob'))
varImp(modFit)
library(AppliedPredictiveModeling)
library(caret)
data("segmentationOriginal")
names(segmentationOriginal)
table(segmentationOriginal$Case)
training <- subset(segmentationOriginal, Case=="Train")
testing <- subset(segmentationOriginal, Case=="Test")
set.seed(125)
fitMod <- train(Class ~ ., method="rpart", data=segmentationOriginal)
fitMod$finalModel
library(rattle)
fancyRpartPlot(fitMod$finalModel)
set.seed(125)
fitMod <- train(Class ~ ., method="rpart", data=training)
fancyRpartPlot(fitMod$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
dim(olive)
names(olive)
summary(olive$Area)
table(olive$Area)
Area
olive$Area
?olive
modFit <- train(Area ~ ., method="rpart", data=olive)
preMod <- predict(modFit, newdata=as.data.frame(t(colMeans(olive))))
preMod
shiny::runApp('C:/Users/Kenneth/Downloads/developing-data-products-shiny-master/developing-data-products-shiny-master')
setwd("C:/Users/Kenneth/Downloads/developing-data-products-shiny-master/developing-data-products-shiny-master")
shiny::runApp()
install.packages('ggvis')
shiny::runApp()
install.packages('data.table')
shiny::runApp()
library(shiny)
shiny::runApp('C:/Users/Kenneth/Google Drive/Post_Graduate/Data_Production/Project/my_App')
shiny::runApp('C:/Users/Kenneth/Google Drive/Post_Graduate/Data_Production/Project/my_App')
shiny::runApp('C:/Users/Kenneth/Google Drive/Post_Graduate/Data_Production/Project/my_App')
setwd("C:/Users/Kenneth/Google Drive/Post_Graduate/Data_Production/Project/my_App")
shiny::runApp()
shiny::runApp()
?textInput
shiny::runApp()
?verbatimTextOutput
shiny::runApp()
?rnorm
rnorm(5, mean=10, sd=10)
shiny::runApp()
shiny::runApp()
rnorm(1, mean=500, sd=500)
rnorm(1, mean=500, sd=500)
rnorm(1, mean=500, sd=500)
rnorm(1, mean=500, sd=500)
rnorm(1, mean=500, sd=500)
round( rnorm(1, mean=500, sd=500), 2)
shiny::runApp()
?actionButton
shiny::runApp()
shiny::runApp()
?sliderInput
shiny::runApp()
shiny::runApp()
?p
shiny::runApp()
shiny::runApp()
m <- c(123)
m
m <- c(m, 1232)
m
mean(m)
shiny::runApp()
shiny::runApp()
shiny::runApp()
rnorm(10, mean=0, sd=0.8)
round(rnorm(10, mean=0, sd=0.8), 2)
shiny::runApp()
rnorm(100, mean=10, sd=2)
d = rnorm(100, mean=10, sd=6)
hist(d)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
s
a
s <- rnorm(100, mean=10, sd=6)
s
hist(s)
k<-hist(s)
k$counts
k
plot(k)
plot(k)
max(k$counts)
shiny::runApp()
for(i, 1:2){}
for(i, 1:2){i}
for(i in 1:2){i}
for(i in 1:2){print i}
for(i in 1:2){display i}
print 1
disp 1
1
1:2
1:0
for(i in 1:2){i}
for(i in 1:2){print(i)}
for(i in 1:0){print(i)}
for(i in 1:10){print(i)}
for(i in 0:0){print(i)}
for(i in 0:1){print(i)}
shiny::runApp()
?hist
shiny::runApp()
shiny::runApp()
for(i in seq(2)){print(i)}
for(i in seq(1)){print(i)}
for(i in seq(0)){print(i)}
seq(0)
shiny::runApp()
numOfSamples = 1
sampleSize = 25
popMean = 234
sampled_means <- round(rnorm(sampleSize, mean=PopMean, sd=500), 2)
sampled_means
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
1 > 1
shiny::runApp()
l <- 0
l <- c(l,1)
l
l <- ''
l <- c(l,1)
l
l <- NA
l <- c(l,1)
l
hist(l)
shiny::runApp()
mean(l)
?mean
mean(l, na.rm=T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
